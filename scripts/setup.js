#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Setting up System Design Node.js Application...\n');

// Create necessary directories
const directories = [
  'uploads',
  'logs',
  'tests',
  'docs'
];

console.log('üìÅ Creating directories...');
directories.forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    console.log(`   ‚úì Created ${dir}/`);
  } else {
    console.log(`   ‚úì ${dir}/ already exists`);
  }
});

// Create .env file from example if it doesn't exist
console.log('\nüîß Setting up environment variables...');
if (!fs.existsSync('.env')) {
  const envExample = `# Server Configuration
PORT=5000
NODE_ENV=development
CLIENT_URL=http://localhost:3000

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/systemdesign_db
DB_NAME=systemdesign_db

# Redis Configuration
REDIS_URL=redis://localhost:6379
REDIS_HOST=localhost
REDIS_PORT=6379

# JWT Configuration
JWT_SECRET=your_super_secret_jwt_key_here_make_it_long_and_complex_${Math.random().toString(36).substring(7)}
JWT_EXPIRES_IN=7d
JWT_REFRESH_SECRET=your_super_secret_refresh_jwt_key_here_${Math.random().toString(36).substring(7)}
JWT_REFRESH_EXPIRES_IN=30d

# Email Configuration (using Gmail SMTP)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_SECURE=false
EMAIL_USER=your_email@gmail.com
EMAIL_PASSWORD=your_app_password

# File Upload Configuration
UPLOAD_PATH=./uploads
MAX_FILE_SIZE=50MB

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Caching Configuration
CACHE_TTL=3600
CACHE_PREFIX=systemdesign_

# Background Jobs
JOB_CONCURRENCY=5
JOB_ATTEMPTS=3

# Monitoring and Logging
LOG_LEVEL=info
LOG_FILE=./logs/app.log

# Search Configuration
SEARCH_PAGE_SIZE=20
MAX_SEARCH_RESULTS=1000

# URL Shortener Configuration
BASE_URL=http://localhost:5000
SHORT_URL_LENGTH=6

# Chat Configuration
MAX_MESSAGE_LENGTH=1000
CHAT_HISTORY_LIMIT=100

# Security Configuration
BCRYPT_ROUNDS=12
SESSION_SECRET=your_session_secret_here_${Math.random().toString(36).substring(7)}

# Performance Configuration
COMPRESSION_LEVEL=6
REQUEST_TIMEOUT=30000`;

  fs.writeFileSync('.env', envExample);
  console.log('   ‚úì Created .env file with default configuration');
} else {
  console.log('   ‚úì .env file already exists');
}

// Create a simple Docker setup
console.log('\nüê≥ Creating Docker configuration...');
const dockerfile = `FROM node:16-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Create uploads directory
RUN mkdir -p uploads logs

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\
  CMD node -e "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
CMD ["npm", "start"]
`;

fs.writeFileSync('Dockerfile', dockerfile);
console.log('   ‚úì Created Dockerfile');

const dockerCompose = `version: '3.8'

services:
  app:
    build: .
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/systemdesign_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped

  mongo:
    image: mongo:4.4
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=systemdesign_db
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  mongo_data:
  redis_data:
`;

fs.writeFileSync('docker-compose.yml', dockerCompose);
console.log('   ‚úì Created docker-compose.yml');

// Create .gitignore
console.log('\nüìù Creating .gitignore...');
const gitignore = `# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.local
.env.development.local
.env.test.local
.env.production.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Uploaded files
uploads/*
!uploads/.gitkeep

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# Testing
coverage/
.nyc_output/

# Build outputs
dist/
build/
`;

fs.writeFileSync('.gitignore', gitignore);
console.log('   ‚úì Created .gitignore');

// Create uploads/.gitkeep
fs.writeFileSync('uploads/.gitkeep', '');
console.log('   ‚úì Created uploads/.gitkeep');

console.log('\nüéâ Setup completed successfully!\n');

console.log('üìã Next steps:');
console.log('1. Make sure MongoDB and Redis are running on your system');
console.log('2. Update the .env file with your actual configuration');
console.log('3. Install dependencies: npm install');
console.log('4. Start the application: npm run dev');
console.log('5. Visit http://localhost:5000/health to check if everything is working\n');

console.log('üê≥ To run with Docker:');
console.log('1. docker-compose up -d');
console.log('2. Visit http://localhost:5000/health\n');

console.log('üìö For more information, check the README.md file\n');

console.log('Happy coding! üöÄ'); 